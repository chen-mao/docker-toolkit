ARG BASE_DIST
ARG CUDA_VERSION
ARG GOLANG_VERSION=x.x.x
ARG VERSION="N/A"

# NOTE: In cases where the libc version is a concern, we would have to use an
# image based on the target OS to build the golang executables here -- especially
# if cgo code is included.
FROM golang:${GOLANG_VERSION} as build

# We override the GOPATH to ensure that the binaries are installed to
# /artifacts/bin
ARG GOPATH=/artifacts

# # Install the experiemental xdxct-container-runtime
# # NOTE: This will be integrated into the xdxct-container-toolkit package / repo
# ARG XDXCT_CONTAINER_RUNTIME_EXPERIMENTAL_VERSION=experimental
# RUN GOPATH=/artifacts go install github.com/XDXCT/xdxct-container-toolkit/cmd/xdxct-container-runtime.experimental@${XDXCT_CONTAINER_RUNTIME_EXPERIMENTAL_VERSION}

WORKDIR /build
COPY . .

# NOTE: Until the config utilities are properly integrated into the
# xdxct-container-toolkit repository, these are built from the `tools` folder
# and not `cmd`.

# 在构建过程中向 Go 编译器传递链接器标志
# -s: 这个标志告诉链接器从二进制文件中去除调试信息，从而减小二进制文件的大小。
# -w: 这个标志告诉链接器从二进制文件中去除 DWARF 符号信息，进一步减小二进制文件的大小。
# -X 'main.Version=${VERSION}': 这个标志将一个名为 main.Version 的字符串变量设置为 ${VERSION} 指定的值。这在构建过程中将版本信息嵌入到二进制文件中。
# ... 是一个通配符，递归地匹配任意深度的子目录。tools 目录及其子目录下的所有 Go 包
# 编译安装的包
RUN GOPATH=/artifacts go install -ldflags="-s -w -X 'main.Version=${VERSION}'" ./tools/...

FROM nvcr.io/nvidia/cuda:${CUDA_VERSION}-base-${BASE_DIST}

# Remove the CUDA repository configurations to avoid issues with rotated GPG keys
RUN rm -f /etc/apt/sources.list.d/cuda.list

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcap2 \
    curl \
        && \
    rm -rf /var/lib/apt/lists/*

ENV NVIDIA_DISABLE_REQUIRE="true"
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=utility

ARG ARTIFACTS_ROOT
ARG PACKAGE_DIST
# COPY dist/ubuntu20.04 /artifacts/packages/ubuntu20.04
COPY ${ARTIFACTS_ROOT}/${PACKAGE_DIST} /artifacts/packages/${PACKAGE_DIST}

WORKDIR /artifacts/packages

ARG PACKAGE_VERSION
ARG TARGETARCH
ENV PACKAGE_ARCH ${TARGETARCH}

ARG LIBNVIDIA_CONTAINER_REPO="https://nvidia.github.io/libnvidia-container"
ARG LIBNVIDIA_CONTAINER0_VERSION
RUN if [ "${PACKAGE_ARCH}" = "arm64" ]; then \
        curl -L ${LIBNVIDIA_CONTAINER_REPO}/${PACKAGE_DIST}/${PACKAGE_ARCH}/libxdxct-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb \
            --output ${PACKAGE_DIST}/${PACKAGE_ARCH}/libxdxct-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb && \
        dpkg -i ${PACKAGE_DIST}/${PACKAGE_ARCH}/libxdxct-container0_${LIBNVIDIA_CONTAINER0_VERSION}_${PACKAGE_ARCH}.deb; \
    fi
# 在容器安装了libxdxct-container.etc,在容器已经有so,bin.
RUN dpkg -i \
    ${PACKAGE_DIST}/${PACKAGE_ARCH}/libxdxct-container1_1.*.deb \
    ${PACKAGE_DIST}/${PACKAGE_ARCH}/libxdxct-container-tools_1.*.deb \
    ${PACKAGE_DIST}/${PACKAGE_ARCH}/xdxct-container-toolkit*_${PACKAGE_VERSION}*.deb

WORKDIR /work

# 将go 镜像编译生成的bin（安装工具的bin） 拷贝到 /work
COPY --from=build /artifacts/bin /work/

ENV PATH=/work:$PATH

LABEL io.k8s.display-name="XDXCT Container Runtime Config"
LABEL name="XDXCT Container Runtime Config"
LABEL vendor="XDXCT"
LABEL version="${VERSION}"
LABEL release="N/A"
LABEL summary="Automatically Configure your Container Runtime for GPU support."
LABEL description="See summary"

RUN mkdir /licenses && mv /NGC-DL-CONTAINER-LICENSE /licenses/NGC-DL-CONTAINER-LICENSE

ENTRYPOINT ["bash"]
